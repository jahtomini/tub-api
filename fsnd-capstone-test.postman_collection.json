{
	"info": {
		"_postman_id": "e3eb391c-fe66-4cc9-a593-6916ddfda7be",
		"name": "fsnd-capstone-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23992859"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "/all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "/random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/random",
							"host": [
								"{{host}}"
							],
							"path": [
								"random"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, contains user data and showerthoughts array\", function () {",
									"    pm.response.to.have.status(200);",
									"    jsonData = pm.response.json();",
									"",
									"    pm.response.to.have.jsonBody(\"id\")",
									"    pm.response.to.have.jsonBody(\"name\")",
									"",
									"    pm.response.to.have.jsonBody(\"shower_thoughts\")",
									"    pm.expect(jsonData.shower_thoughts).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, because user does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1/followers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.response.to.have.jsonBody(\"followers\")",
									"    pm.response.to.have.jsonBody(\"user_id\")",
									"    pm.response.to.have.jsonBody(\"username\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1/followers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1000/followers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 because user does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1000/followers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1000",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "/shower_thoughts/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and showerthought has been deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('Showerthought successfully deleted.')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/shower_thoughts/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"shower_thoughts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/shower_thoughts/1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 because showerthought does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/shower_thoughts/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"shower_thoughts",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/50",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"50"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "regular",
			"item": [
				{
					"name": "reset",
					"item": [
						{
							"name": "Reset Database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Database has been reset.\", function () {",
											"    jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.message).to.equal('Database has been reset.')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/db",
									"host": [
										"{{host}}"
									],
									"path": [
										"db"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{adminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, contains user data and showerthoughts array\", function () {",
									"    pm.response.to.have.status(200);",
									"    jsonData = pm.response.json();",
									"",
									"    pm.response.to.have.jsonBody(\"id\")",
									"    pm.response.to.have.jsonBody(\"name\")",
									"",
									"    pm.response.to.have.jsonBody(\"shower_thoughts\")",
									"    pm.expect(jsonData.shower_thoughts).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, because user does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1000",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1/followers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.response.to.have.jsonBody(\"followers\")",
									"    pm.response.to.have.jsonBody(\"user_id\")",
									"    pm.response.to.have.jsonBody(\"username\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1/followers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1000/followers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 because user does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1000/followers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1000",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 because credentials are valid but not permitted to view the resource.\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/shower_thoughts/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and showerthought has been deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('Showerthought successfully deleted.')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/shower_thoughts/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"shower_thoughts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/shower_thoughts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody(\"success\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creator\": \"yilongma\",\n    \"content\": \"Smart phones are probably responsible for reducing graffiti in public toilets.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/shower_thoughts",
							"host": [
								"{{host}}"
							],
							"path": [
								"shower_thoughts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/shower_thoughts (duplicate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 because message is a duplicate of an existing showerthought.\", function () {",
									"    pm.response.to.have.status(400);",
									"    jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.message).to.equal('Identical showerthought already exists')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"creator\": \"yilongma\",\n    \"content\": \"Smart phones are probably responsible for reducing graffiti in public toilets.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/shower_thoughts",
							"host": [
								"{{host}}"
							],
							"path": [
								"shower_thoughts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    pm.response.to.have.jsonBody(\"user_id\")",
									"    pm.response.to.have.jsonBody(\"user_name\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"youveHeardAboutMe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users (duplicate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 because username already exists\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"    jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.message).to.equal('User with that name already exists')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"youveHeardAboutMe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{regularToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "reset",
			"item": [
				{
					"name": "Reset Database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Database has been reset.\", function () {",
									"    jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.message).to.equal('Database has been reset.')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}